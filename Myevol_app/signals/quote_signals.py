import logging
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from ..models.quote_model import Quote
from ..services.notification_service import create_admin_notification

logger = logging.getLogger(__name__)


@receiver(post_save, sender=Quote)
def handle_quote_post_save(sender, instance, created, **kwargs):
    """
    Signal d√©clench√© lorsqu'une citation est cr√©√©e.
    - Log la cr√©ation.
    - Envoie une notification √† l'admin (via create_admin_notification).

    Args:
        sender (Model): Le mod√®le √©metteur (Quote).
        instance (Quote): Instance de la citation.
        created (bool): True si nouvellement cr√©√©e, False si mise √† jour.
    """
    if created:
        preview = instance.text[:50]
        author = instance.author or "Inconnu"
        logger.info(f"[QUOTE] Nouvelle citation cr√©√©e : '{preview}...' ‚Äî {author}")

        # Notification admin
        create_admin_notification(
            message=f"üìù Nouvelle citation ajout√©e : '{preview}...' ‚Äî {author}",
            notif_type="info"
        )


@receiver(post_delete, sender=Quote)
def handle_quote_post_delete(sender, instance, **kwargs):
    """
    Signal d√©clench√© lors de la suppression d'une citation.
    Log l'√©v√©nement.

    Args:
        sender (Model): Le mod√®le √©metteur (Quote).
        instance (Quote): Instance supprim√©e.
    """
    preview = instance.text[:50]
    author = instance.author or "Inconnu"
    logger.info(f"[QUOTE] Citation supprim√©e : '{preview}...' ‚Äî {author}")
