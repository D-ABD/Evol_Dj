import logging
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from django.utils.timezone import now

from ..models import JournalEntry, DailyStat, Notification, JournalMedia
from ..services.challenge_service import check_challenges
from ..services.badge_service import update_user_badges

logger = logging.getLogger(__name__)


@receiver(post_save, sender=JournalEntry)
def handle_journal_entry_created_or_updated(sender, instance, created, **kwargs):
    """
    D√©clench√© √† la cr√©ation ou mise √† jour d'une entr√©e de journal.

    - Si cr√©√©e ‚ûî met √† jour les stats journali√®res, d√©fis, badges, streaks et notifie la cr√©ation.
    - Si mise √† jour ‚ûî envoie une notification de mise √† jour.
    """
    if created:
        logger.info(f"[JOURNAL] Nouvelle entr√©e pour {instance.user.username} le {instance.created_at.date()}.")
        
        # ‚ûï Statistiques journali√®res
        DailyStat.generate_for_user(instance.user, instance.created_at.date())
        
        # ‚úÖ D√©fis
        check_challenges(instance.user)
        
        # üèÖ Badges
        update_user_badges(instance.user)

        # üî• Streaks
        instance.user.update_streaks()

        # üîî Notification de cr√©ation
        Notification.objects.create(
            user=instance.user,
            message=f"Votre nouvelle entr√©e du {instance.created_at.date()} a √©t√© enregistr√©e.",
            notif_type="journal_created"
        )
    else:
        logger.info(f"[JOURNAL] Entr√©e mise √† jour pour {instance.user.username} le {instance.updated_at.date()}.")
        
        # üîî Notification de mise √† jour
        Notification.objects.create(
            user=instance.user,
            message=f"Votre entr√©e de journal du {instance.created_at.date()} a √©t√© mise √† jour.",
            notif_type="journal_update"
        )


@receiver(post_delete, sender=JournalEntry)
def handle_journal_entry_deletion(sender, instance, **kwargs):
    """
    D√©clench√© lors de la suppression d'une entr√©e de journal.

    - Supprime les m√©dias associ√©s.
    - Envoie une notification de suppression.
    """
    logger.info(f"[JOURNAL] Suppression de l'entr√©e {instance.id} pour {instance.user.username}.")

    # Supprimer tous les m√©dias li√©s √† l'entr√©e
    for media in instance.media.all():
        logger.info(f"[MEDIA] Suppression du fichier m√©dia {media.file.url} li√© √† l'entr√©e {instance.id}.")
        media.file.delete(save=False)
        media.delete()

    # üîî Notification de suppression
    Notification.objects.create(
        user=instance.user,
        message=f"L'entr√©e de journal du {instance.created_at.date()} a √©t√© supprim√©e.",
        notif_type="journal_deleted"
    )
    logger.info(f"[NOTIFICATION] Suppression notifi√©e √† {instance.user.username}.")
