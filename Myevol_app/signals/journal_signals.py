# signals/journal_signals.py

import logging
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from django.utils.timezone import now
from ..models import JournalEntry, DailyStat, Notification, JournalMedia
from ..services.challenge_service import check_challenges
from ..services.badge_service import update_user_badges

logger = logging.getLogger(__name__)

@receiver(post_save, sender=JournalEntry)
def handle_journal_entry_created(sender, instance, created, **kwargs):
    """
    Signal d√©clench√© lorsqu'une entr√©e de journal est cr√©√©e.
    Met √† jour les statistiques journali√®res, v√©rifie les d√©fis en cours,
    et met √† jour les badges de l'utilisateur.
    """
    if created:
        logger.info(f"Nouvelle entr√©e de journal cr√©√©e pour {instance.user.username} le {instance.created_at.date()}")
        
        # ‚ûï Mise √† jour des statistiques journali√®res
        DailyStat.generate_for_user(instance.user, instance.created_at.date())
        
        # ‚úÖ V√©rification des d√©fis
        check_challenges(instance.user)
        
        # üèÖ Mise √† jour des badges de l'utilisateur
        update_user_badges(instance.user)

        # üî• Mise √† jour des streaks de l'utilisateur
        instance.user.update_streaks()

        # üîî Envoi d'une notification de cr√©ation
        Notification.objects.create(
            user=instance.user,
            message=f"Votre nouvelle entr√©e du {instance.created_at.date()} a √©t√© enregistr√©e.",
            notif_type="journal_created"
        )


@receiver(post_save, sender=JournalEntry)
def handle_journal_entry_updated(sender, instance, created, **kwargs):
    """
    Signal d√©clench√© lorsqu'une entr√©e de journal est mise √† jour.
    Envoie une notification √† l'utilisateur pour l'informer de la mise √† jour.
    """
    if not created:
        # On envoie une notification seulement si l'entr√©e est mise √† jour
        logger.info(f"Entr√©e de journal mise √† jour pour {instance.user.username} le {instance.updated_at.date()}")
        
        Notification.objects.create(
            user=instance.user,
            message=f"Votre entr√©e de journal du {instance.created_at.date()} a √©t√© mise √† jour.",
            notif_type="journal_update"
        )


@receiver(post_delete, sender=JournalEntry)
def handle_media_cleanup(sender, instance, **kwargs):
    """
    Supprime les m√©dias associ√©s √† l'entr√©e de journal lorsqu'elle est supprim√©e.
    """
    logger.info(f"Suppression des m√©dias associ√©s √† l'entr√©e de journal pour {instance.user.username}")
    
    # Supprimer les fichiers multim√©dia associ√©s √† cette entr√©e
    for media in instance.media.all():
        logger.info(f"Suppression du fichier m√©dia {media.file.url} associ√© √† l'entr√©e {instance.id}")
        media.file.delete(save=False)  # Suppression du fichier
        media.delete()  # Suppression de l'objet media

    logger.info(f"M√©dias supprim√©s pour l'entr√©e de journal {instance.id}")

    # üîî Envoi d'une notification pour informer l'utilisateur de la suppression
    Notification.objects.create(
        user=instance.user,
        message=f"L'entr√©e de journal du {instance.created_at.date()} a √©t√© supprim√©e avec succ√®s.",
        notif_type="journal_deleted"
    )

