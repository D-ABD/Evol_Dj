# signals/challenge_signals.py

import logging
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from django.utils.timezone import now
from ..models import Challenge, ChallengeProgress, Notification
from ..services.challenge_service import update_challenge_progress
from ..services.badge_service import update_user_badges

logger = logging.getLogger(__name__)

@receiver(post_save, sender=Challenge)
def log_challenge_creation(sender, instance, created, **kwargs):
    """
    Signal d√©clench√© √† chaque fois qu'un d√©fi est cr√©√©.
    Enregistre un log pour l'√©v√©nement de cr√©ation et envoie une notification.
    """
    if created:
        logger.info(f"D√©fi cr√©√© : {instance.title} (ID: {instance.id})")
        # Envoi de notification √† l'utilisateur ou √† un groupe
        Notification.objects.create(
            user=instance.user,
            message=f"üéØ Nouveau d√©fi cr√©√© : {instance.title}",
            notif_type="defi"
        )

@receiver(post_save, sender=ChallengeProgress)
def update_progress(sender, instance, created, **kwargs):
    """
    Signal d√©clench√© √† chaque fois que la progression d'un utilisateur sur un d√©fi est mise √† jour.
    Appelle la m√©thode de mise √† jour de la progression et v√©rifie si l'utilisateur a compl√©t√© le d√©fi.
    """
    if created:
        logger.info(f"Progression ajout√©e pour l'utilisateur {instance.user.username} sur le d√©fi {instance.challenge.title}")
        # On v√©rifie la progression de l'utilisateur sur ce d√©fi
        update_challenge_progress(instance)
        
        # V√©rification des badges et mise √† jour si n√©cessaire
        update_user_badges(instance.user)

@receiver(post_delete, sender=ChallengeProgress)
def remove_progress(sender, instance, **kwargs):
    """
    Signal d√©clench√© lors de la suppression d'une progression de d√©fi.
    Met √† jour les statistiques et enregistre un log de l'√©v√©nement.
    """
    logger.info(f"Progression supprim√©e pour l'utilisateur {instance.user.username} sur le d√©fi {instance.challenge.title}")
    
    # Mettre √† jour les statistiques apr√®s suppression
    # Vous pouvez ajouter une logique pour recalculer les statistiques des utilisateurs ici, si n√©cessaire.
    # Exemple : DailyStat.update_user_stats(instance.user)

@receiver(post_save, sender=Challenge)
def check_challenge_end(sender, instance, created, **kwargs):
    """
    Signal d√©clench√© lorsque la date de fin d'un d√©fi est atteinte.
    Ce signal peut √™tre utilis√© pour effectuer des actions comme attribuer des badges,
    envoyer une notification √† l'utilisateur ou effectuer des calculs statistiques.
    """
    today = now().date()
    if not created and instance.end_date == today:
        logger.info(f"Le d√©fi '{instance.title}' a pris fin aujourd'hui.")
        
        # Exemple : Attribuer un badge ou envoyer une notification √† l'utilisateur
        Notification.objects.create(
            user=instance.user,
            message=f"üéØ Le d√©fi '{instance.title}' est termin√©. F√©licitations !",
            notif_type="defi_ach√®vement"
        )

        # Vous pouvez ajouter un service pour g√©rer la logique de fin de d√©fi (par exemple, attribuer des badges)
        # update_user_badges(instance.user)
