from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils.timezone import now
from datetime import timedelta
import logging
from django.db.models.signals import post_delete

from .models import JournalEntry, Badge, Notification, DailyStat, User, UserPreference
from .utils.levels import get_user_level  # Cette fonction calcule le niveau d'un utilisateur

# Configuration du logger pour tracer les √©v√©nements importants
logger = logging.getLogger(__name__)


# üèÖ Fonction g√©n√©rique pour cr√©er un badge, une notification et un log
def award_badge(user, name, description, icon):
    """
    Fonction utilitaire pour attribuer un badge √† un utilisateur.
    Cr√©e √©galement une notification pour informer l'utilisateur.
    
    Args:
        user: L'utilisateur √† qui attribuer le badge
        name: Nom du badge
        description: Description du badge
        icon: Ic√¥ne repr√©sentant le badge (emoji)
        
    Returns:
        bool: True si le badge a √©t√© nouvellement cr√©√©, False s'il existait d√©j√†
    """
    badge, created = Badge.objects.get_or_create(
        user=user,
        name=name,
        defaults={
            "description": description,
            "icon": icon,
        }
    )
    # Si le badge vient d'√™tre cr√©√©, on notifie l'utilisateur
    if created:
        Notification.objects.create(
            user=user,
            message=f"{icon} Nouveau badge : {name} !"
        )
        # Journalisation de l'√©v√©nement pour le suivi administratif
        logger.info(f"[BADGE] {user.username} a d√©bloqu√© : {name}")
    return created


@receiver(post_save, sender=JournalEntry)
def check_badges_and_stats(sender, instance, created, **kwargs):
    """
    Signal d√©clench√© √† la sauvegarde d'une JournalEntry.
    G√®re deux aspects principaux :
    1. Mise √† jour des statistiques journali√®res
    2. Attribution des badges en fonction des accomplissements
    
    Args:
        sender: Classe du mod√®le qui a envoy√© le signal (JournalEntry)
        instance: Instance du mod√®le qui a √©t√© sauvegard√©e
        created: Bool√©en indiquant si l'instance vient d'√™tre cr√©√©e (True) ou mise √† jour (False)
        **kwargs: Arguments suppl√©mentaires du signal
    """
    user = instance.user

    # üîÑ Met √† jour ou cr√©e les statistiques journali√®res pour la date de l'entr√©e
    DailyStat.generate_for_user(user=user, date=instance.created_at.date())

    # ‚ö†Ô∏è On ne v√©rifie les badges que si c'est une nouvelle entr√©e
    # √âvite de dupliquer les badges lors des mises √† jour d'entr√©es existantes
    if not created:
        return

    # R√©cup√®re le nombre total d'entr√©es de l'utilisateur
    total = user.entries.count()

    # ‚úÖ Badge : premi√®re entr√©e
    # D√©cern√© lorsque l'utilisateur cr√©e sa toute premi√®re entr√©e
    if total == 1:
        award_badge(
            user,
            name="Premi√®re entr√©e",
            description="Bravo pour ta premi√®re entr√©e üéâ",
            icon="üå±"
        )

    # ‚úÖ Badge : 7 jours d'activit√© cons√©cutifs
    # V√©rifie si l'utilisateur a au moins une entr√©e pour chacun des 7 derniers jours
    streak_days = 7
    today = now().date()
    # V√©rifie l'existence d'au moins une entr√©e pour chaque jour de la p√©riode
    has_streak = all(
        user.entries.filter(created_at__date=today - timedelta(days=i)).exists()
        for i in range(streak_days)
    )
    if has_streak:
        award_badge(
            user,
            name="7 jours d'activit√©",
            description="1 semaine d'activit√©, continue comme √ßa üöÄ",
            icon="üî•"
        )

    # ‚úÖ Badge : Niveau
    # Attribue un badge lorsque l'utilisateur atteint un nouveau niveau
    # La fonction get_user_level d√©termine le niveau en fonction du nombre total d'entr√©es
    level = get_user_level(total)
    if level > 0:
        badge_name = f"Niveau {level}"
        # V√©rifie si l'utilisateur n'a pas d√©j√† ce badge
        if not user.badges.filter(name=badge_name).exists():
            award_badge(
                user,
                name=badge_name,
                description=f"Tu as atteint le niveau {level} üí™",
                icon="üèÜ"
            )


@receiver(post_delete, sender=JournalEntry)
def update_stats_on_delete(sender, instance, **kwargs):
    """
    Signal d√©clench√© √† la suppression d'une JournalEntry.
    Assure que les statistiques journali√®res restent coh√©rentes apr√®s la suppression d'une entr√©e.
    
    Deux cas possibles :
    1. S'il reste des entr√©es pour cette date : recalcule les statistiques
    2. S'il n'y a plus d'entr√©es pour cette date : supprime les statistiques
    
    Args:
        sender: Classe du mod√®le qui a envoy√© le signal (JournalEntry)
        instance: Instance du mod√®le qui a √©t√© supprim√©e
        **kwargs: Arguments suppl√©mentaires du signal
    """
    user = instance.user
    date = instance.created_at.date()

    # üîÑ V√©rifie s'il reste des entr√©es pour cette date
    entries = user.entries.filter(created_at__date=date)
    if entries.exists():
        # S'il reste des entr√©es, recalcule les statistiques
        DailyStat.generate_for_user(user=user, date=date)
    else:
        # S'il n'y a plus d'entr√©es, supprime les statistiques pour cette date
        DailyStat.objects.filter(user=user, date=date).delete()
        # Journalise l'√©v√©nement pour le suivi administratif
        logger.info(f"[STATS] Statistiques supprim√©es pour {user.username} - {date}")

@receiver(post_save, sender=Notification)
def mark_other_notifications_as_read(sender, instance, created, **kwargs):
    """
    Quand une notification est cr√©√©e, marque les autres comme lues.
    """
    if created:
        # Marquer toutes les autres notifications de l'utilisateur comme lues
        Notification.objects.filter(
            user=instance.user,
            is_read=False
        ).exclude(id=instance.id).update(is_read=True)

@receiver(post_save, sender=Notification)
def limit_notifications(sender, instance, **kwargs):
    """
    Signal d√©clench√© apr√®s la sauvegarde d'une notification.
    Limite le nombre maximum de notifications par utilisateur pour √©viter une surcharge de la base de donn√©es.
    
    Fonctionnement :
    - R√©cup√®re toutes les notifications de l'utilisateur, tri√©es par date (plus r√©centes d'abord)
    - Si le nombre d√©passe la limite, supprime les plus anciennes
    
    Args:
        sender: Classe du mod√®le qui a envoy√© le signal (Notification)
        instance: Instance de notification qui vient d'√™tre sauvegard√©e
        **kwargs: Arguments suppl√©mentaires du signal
    """
    max_notifs = 100  # Nombre maximum de notifications √† conserver par utilisateur
    
    # R√©cup√®re les notifications de l'utilisateur, tri√©es des plus r√©centes aux plus anciennes
    qs = Notification.objects.filter(user=instance.user).order_by('-created_at')
    
    # Si le nombre d√©passe la limite
    if qs.count() > max_notifs:
        # S√©lectionne les notifications √† supprimer (les plus anciennes au-del√† de la limite)
        to_delete = qs[max_notifs:]
        # Supprime ces notifications
        to_delete.delete()
        

@receiver(post_save, sender=User)
def create_user_preferences(sender, instance, created, **kwargs):
    """
    Signal d√©clench√© apr√®s la cr√©ation d'un utilisateur.
    Cr√©e automatiquement un objet de pr√©f√©rences par d√©faut pour chaque nouvel utilisateur.
    
    Cette fonction garantit que chaque utilisateur dispose imm√©diatement de pr√©f√©rences configur√©es
    avec les valeurs par d√©faut, ce qui simplifie le reste du code de l'application.
    
    Args:
        sender: Classe du mod√®le qui a envoy√© le signal (User)
        instance: L'utilisateur qui vient d'√™tre cr√©√© ou modifi√©
        created: Bool√©en indiquant si l'utilisateur vient d'√™tre cr√©√© (True) ou mis √† jour (False)
        **kwargs: Arguments suppl√©mentaires du signal
    """
    # V√©rifie s'il s'agit d'un nouvel utilisateur
    if created:
        # Cr√©e un objet de pr√©f√©rences par d√©faut pour cet utilisateur
        UserPreference.objects.create(user=instance)