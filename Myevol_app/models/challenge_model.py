from datetime import timedelta
from django.db import models
from django.utils.timezone import now
from .notification_model import Notification

from django.conf import settings
User = settings.AUTH_USER_MODEL



# üéØ Mod√®le principal de d√©fi
class Challenge(models.Model):
    """
    Mod√®le repr√©sentant un d√©fi temporaire propos√© aux utilisateurs.
    Les d√©fis encouragent l'engagement en fixant des objectifs √† atteindre dans une p√©riode donn√©e.
    
    API Endpoints sugg√©r√©s:
    - GET /api/challenges/ - Liste tous les d√©fis (avec filtres actifs/inactifs)
    - GET /api/challenges/{id}/ - D√©tails d'un d√©fi sp√©cifique
    - GET /api/challenges/active/ - Liste uniquement les d√©fis actuellement actifs
    - GET /api/challenges/{id}/participants/ - Liste les utilisateurs participant √† un d√©fi
    
    Exemple de s√©rialisation JSON:
    {
        "id": 1,
        "title": "Marathon d'entr√©es",
        "description": "Cr√©ez 15 entr√©es en 7 jours !",
        "start_date": "2025-04-15",
        "end_date": "2025-04-22",
        "target_entries": 15,
        "is_active": true,
        "days_remaining": 3,
        "participants_count": 24
    }
    """
    title = models.CharField(max_length=255)  # Titre du d√©fi
    description = models.TextField()          # Description d√©taill√©e
    start_date = models.DateField()           # Date de d√©but du d√©fi
    end_date = models.DateField()             # Date de fin du d√©fi
    target_entries = models.PositiveIntegerField(default=5)  # Objectif d'entr√©es √† atteindre

    class Meta:
        """
        Filtres API recommand√©s:
        - title (exact, contains)
        - start_date, end_date (gte, lte, range)
        - is_active (boolean calcul√©)
        """
        ordering = ['-end_date']  # Tri par d√©faut: d√©fis se terminant bient√¥t en premier
        verbose_name = "D√©fi"
        verbose_name_plural = "D√©fis"

    def __str__(self):
        return f"{self.title} ({self.start_date} ‚Üí {self.end_date})"

    def is_active(self):
        """
        V√©rifie si le d√©fi est actuellement actif.

        Returns:
            bool: True si actif aujourd'hui, sinon False.
            
        Utilisation dans l'API:
            Ce champ devrait √™tre inclus comme champ calcul√© (SerializerMethodField)
            dans la s√©rialisation pour permettre de filtrer facilement les d√©fis actifs.
            
        Exemple d'impl√©mentation dans un s√©rialiseur:
            @property
            def is_active(self):
                return self.instance.is_active()
        """
        today = now().date()
        return self.start_date <= today <= self.end_date
        
    def days_remaining(self):
        """
        Calcule le nombre de jours restants avant la fin du d√©fi.
        
        Returns:
            int: Nombre de jours jusqu'√† la fin, ou 0 si le d√©fi est termin√©
            
        Utilisation dans l'API:
            Utile comme champ calcul√© pour l'affichage dans l'interface utilisateur.
        """
        today = now().date()
        if today > self.end_date:
            return 0
        return (self.end_date - today).days

    def is_completed(self, user):
        """
        V√©rifie si l'utilisateur a atteint l'objectif d'entr√©es pendant la p√©riode du d√©fi.

        Args:
            user (User): L'utilisateur √† √©valuer

        Returns:
            bool: True si l'objectif est atteint
            
        Utilisation dans l'API:
            Cette m√©thode peut √™tre utilis√©e pour cr√©er un champ calcul√© 'is_completed'
            dans la s√©rialisation des d√©fis, personnalis√©e pour chaque utilisateur.
            
        Exemple d'impl√©mentation dans un s√©rialiseur:
            def get_is_completed(self, obj):
                user = self.context['request'].user
                return obj.is_completed(user)
        """
        return user.entries.filter(
            created_at__date__range=(self.start_date, self.end_date)
        ).count() >= self.target_entries
        
    def get_progress(self, user):
        """
        Calcule la progression de l'utilisateur vers l'accomplissement du d√©fi.
        
        Args:
            user (User): L'utilisateur dont on calcule la progression
            
        Returns:
            dict: Dictionnaire contenant les informations de progression
                {
                    'percent': 60,  # Pourcentage de progression (0-100)
                    'current': 9,   # Nombre actuel d'entr√©es
                    'target': 15,   # Objectif √† atteindre
                    'completed': False  # Si l'objectif est atteint
                }
                
        Utilisation dans l'API:
            Id√©al pour un endpoint /api/challenges/{id}/progress/
            ou comme champ calcul√© dans la s√©rialisation des d√©fis.
        """
        current = user.entries.filter(
            created_at__date__range=(self.start_date, self.end_date)
        ).count()
        
        completed = current >= self.target_entries
        percent = min(100, int((current / self.target_entries) * 100))
        
        return {
            'percent': percent,
            'current': current,
            'target': self.target_entries,
            'completed': completed
        }


# üîÅ Mod√®le de progression utilisateur pour chaque d√©fi
class ChallengeProgress(models.Model):
    """
    Suivi de la progression d'un utilisateur sur un d√©fi.
    √âvite les doublons et garde trace de la date de compl√©tion.
    
    API Endpoints sugg√©r√©s:
    - GET /api/users/me/challenges/ - Liste les d√©fis de l'utilisateur courant avec progression
    - GET /api/challenges/{id}/progress/ - Progression de l'utilisateur sur un d√©fi sp√©cifique
    - PATCH /api/challenges/{id}/join/ - Rejoindre un d√©fi (cr√©e une entr√©e de progression)
    
    Exemple de s√©rialisation JSON:
    {
        "id": 5,
        "challenge": {
            "id": 1,
            "title": "Marathon d'entr√©es",
            "description": "Cr√©ez 15 entr√©es en 7 jours !"
        },
        "completed": true,
        "completed_at": "2025-04-18T14:32:51Z",
        "progress": {
            "percent": 100,
            "current": 15,
            "target": 15
        }
    }
    """
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="challenges")
    challenge = models.ForeignKey(Challenge, on_delete=models.CASCADE, related_name="progresses")
    completed = models.BooleanField(default=False)
    completed_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        unique_together = ('user', 'challenge')  # Un seul lien par utilisateur/d√©fi
        
        """
        Filtres API recommand√©s:
        - challenge (exact)
        - completed (boolean)
        - completed_at (date, gte, lte)
        """

    def __str__(self):
        return f"{self.user.username} ‚Üí {self.challenge.title} ({'‚úÖ' if self.completed else '‚è≥'})"
        
    def get_progress(self):
        """
        Calcule la progression actuelle pour cet utilisateur sur ce d√©fi.
        
        Returns:
            dict: Informations de progression (similaire √† Challenge.get_progress)
            
        Utilisation dans l'API:
            Cette m√©thode peut servir √† enrichir la s√©rialisation du mod√®le.
        """
        return self.challenge.get_progress(self.user)


# üîé V√©rification globale de tous les d√©fis actifs pour un utilisateur
def check_challenges(user):
    """
    V√©rifie tous les d√©fis actifs pour l'utilisateur.
    Si l'utilisateur a compl√©t√© un d√©fi, il est marqu√© comme tel,
    une notification est envoy√©e.

    Args:
        user (User): L'utilisateur √† v√©rifier
        
    Utilisation dans l'API:
        Cette fonction devrait √™tre appel√©e apr√®s toute cr√©ation d'entr√©e de journal
        via un signal post_save ou directement dans la vue API qui g√®re la cr√©ation d'entr√©es.
        
    Exemple d'utilisation dans une vue API:
        @action(detail=False, methods=['post'])
        def create_entry(self, request):
            # ... logique de cr√©ation d'entr√©e ...
            check_challenges(request.user)
            return Response(...)
    """
    today = now().date()

    # Parcourt tous les d√©fis actifs
    for challenge in Challenge.objects.filter(start_date__lte=today, end_date__gte=today):
        progress, _ = ChallengeProgress.objects.get_or_create(user=user, challenge=challenge)

        if not progress.completed and challenge.is_completed(user):
            # Mise √† jour de la progression
            progress.completed = True
            progress.completed_at = now()
            progress.save()

            # Notification √† l'utilisateur
            Notification.objects.create(
                user=user,
                message=f"üéØ Tu as termin√© le d√©fi : {challenge.title} !",
                notif_type="objectif"
            )