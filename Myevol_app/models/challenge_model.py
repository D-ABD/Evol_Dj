# MyEvol_app/models/challenge_model.py

from django.db import models
from django.utils.timezone import now
from django.urls import reverse
from django.conf import settings
import logging
from django.core.exceptions import ValidationError



User = settings.AUTH_USER_MODEL
logger = logging.getLogger(__name__)

class Challenge(models.Model):
    """
    üéØ Mod√®le repr√©sentant un d√©fi temporaire propos√© aux utilisateurs.

    Les d√©fis visent √† stimuler l'engagement en fixant des objectifs √† atteindre 
    dans une p√©riode donn√©e (ex : nombre d‚Äôentr√©es √† r√©aliser en X jours).

    API Endpoints recommand√©s :
    - GET /api/challenges/ : Liste pagin√©e des d√©fis
    - GET /api/challenges/{id}/ : D√©tails d‚Äôun d√©fi
    - GET /api/challenges/active/ : Liste des d√©fis actifs uniquement
    - GET /api/challenges/{id}/participants/ : Liste des participants

    Champs calcul√©s √† exposer dans l‚ÄôAPI :
    - is_active (bool) : Indique si le d√©fi est actuellement actif
    - days_remaining (int) : Nombre de jours restants avant la fin du d√©fi
    - participants_count (int) : Nombre de participants inscrits √† ce d√©fi
    """
    title = models.CharField(max_length=255, help_text="Titre du d√©fi affich√© √† l'utilisateur")
    description = models.TextField(help_text="Description du d√©fi et r√®gles √† suivre")
    start_date = models.DateField(help_text="Date de d√©but du d√©fi")
    end_date = models.DateField(help_text="Date de fin du d√©fi")
    target_entries = models.PositiveIntegerField(
        default=5,
        help_text="Nombre d'entr√©es √† r√©aliser pour r√©ussir le d√©fi"
    )

    class Meta:
        ordering = ['-end_date']
        verbose_name = "D√©fi"
        verbose_name_plural = "D√©fis"

    def __str__(self):
        return self.title

    def __repr__(self):
        return f"<Challenge title='{self.title}' target={self.target_entries} from={self.start_date} to={self.end_date}>"

    def get_absolute_url(self):
        """Retourne l'URL vers la vue de d√©tail du d√©fi."""
        return reverse('challenge_detail', kwargs={'pk': self.pk})

    @property
    def is_active(self):
        """Retourne True si le d√©fi est actif aujourd‚Äôhui (entre start et end)."""
        today = now().date()
        return self.start_date <= today <= self.end_date

    @property
    def days_remaining(self):
        """Retourne le nombre de jours restants avant la fin du d√©fi."""
        today = now().date()
        return max(0, (self.end_date - today).days)

    @property
    def participants_count(self):
        """Retourne le nombre de participants inscrits √† ce d√©fi."""
        return self.progresses.count()

    def is_completed(self, user):
        """
        V√©rifie si l‚Äôutilisateur a compl√©t√© le d√©fi (atteint l‚Äôobjectif d‚Äôentr√©es).
        """
        return user.entries.filter(
            created_at__date__range=(self.start_date, self.end_date)
        ).count() >= self.target_entries

    def get_progress(self, user):
        """
        Calcule la progression de l‚Äôutilisateur sur ce d√©fi.
        
        Args:
            user (User): Utilisateur pour lequel calculer la progression
        
        Returns:
            dict: Un dictionnaire contenant la progression sous forme de pourcentage
                  et d'informations sur le nombre actuel et le nombre cible d'entr√©es
        """
        current = user.entries.filter(
            created_at__date__range=(self.start_date, self.end_date)
        ).count()

        completed = current >= self.target_entries
        percent = min(100, int((current / self.target_entries) * 100)) if self.target_entries > 0 else 0

        return {
            'percent': percent,
            'current': current,
            'target': self.target_entries,
            'completed': completed
        }

    def save(self, *args, **kwargs):
        """
        Red√©finition de la m√©thode save pour logguer la cr√©ation de chaque d√©fi.
        """
        is_new = self.pk is None
        super().save(*args, **kwargs)
        
        if is_new:
            logger.info(f"Cr√©ation d'un nouveau d√©fi : {self.title} (ID: {self.id})")
    def clean(self):
        """Validation des contraintes m√©tier du d√©fi."""
        if self.start_date > self.end_date:
            raise ValidationError("La date de d√©but doit pr√©c√©der la date de fin.")

class ChallengeProgress(models.Model):
    """
    Suivi individuel d‚Äôun utilisateur sur un d√©fi.
    Ce mod√®le est utilis√© pour savoir si l'utilisateur a compl√©t√© un d√©fi et pour stocker
    l'√©tat actuel de la progression sur ce d√©fi.
    
    API recommand√©e :
    - GET /api/users/me/challenges/ : Liste des d√©fis avec progression
    - GET /api/challenges/{id}/progress/ : D√©tails de la progression d'un utilisateur
    - POST /api/challenges/{id}/join/ : Rejoindre un d√©fi
    """
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        related_name="challenges",
        help_text="Utilisateur li√© √† ce d√©fi"
    )
    challenge = models.ForeignKey(
        Challenge,
        on_delete=models.CASCADE,
        related_name="progresses",
        help_text="D√©fi concern√©"
    )
    completed = models.BooleanField(default=False, help_text="Statut de compl√©tion du d√©fi")
    completed_at = models.DateTimeField(null=True, blank=True, help_text="Date de compl√©tion")

    class Meta:
        unique_together = ('user', 'challenge')
        verbose_name = "Progression de d√©fi"
        verbose_name_plural = "Progressions de d√©fi"

    def __str__(self):
        return f"{self.user.username} - {self.challenge.title}"

    def __repr__(self):
        return f"<ChallengeProgress user='{self.user.username}' challenge='{self.challenge.title}' completed={self.completed}>"

    def get_absolute_url(self):
        """Retourne l‚ÄôURL vers la vue de d√©tail de la progression du d√©fi."""
        return reverse('challenge_progress_detail', kwargs={'pk': self.pk})

    def get_progress(self):
        """
        Retourne la progression actuelle de l‚Äôutilisateur sur ce d√©fi.
        
        Retourne la progression en termes de pourcentage, ainsi que l'√©tat de compl√©tion.
        """
        return self.challenge.get_progress(self.user)

    def save(self, *args, **kwargs):
        """
        Red√©finition de la m√©thode save pour logguer la mise √† jour de la progression du d√©fi.
        """
        is_new = self.pk is None
        super().save(*args, **kwargs)
        from ..models.event_log_model import EventLog

        if not is_new and self.completed and self.completed_at is None:
            self.completed_at = now()
            EventLog.log_action(
                action="defi_termine",
                description=f"{self.user.username} a compl√©t√© le d√©fi '{self.challenge.title}'",
                user=self.user,
                metadata={"challenge_id": self.challenge.id}
            )
