from datetime import timedelta
from django.db import models
from django.utils.timezone import now
from django.contrib.auth.models import AbstractUser
from collections import defaultdict
from django.conf import settings
from django.db.models import Avg, Count
from django.core.validators import MinValueValidator, MaxValueValidator
from django.core.exceptions import ValidationError
from django.utils.functional import cached_property

# Services m√©tiers externalis√©s (bonne pratique)
from ..services.badge_service import update_user_badges
from ..services.preferences_service import create_preferences_for_user
from ..services.streak_service import update_user_streak
from ..services.user_stats_service import (
    mood_average as compute_mood_average,
    current_streak as compute_current_streak,
    has_entries_every_day as compute_entries_every_day,
    entries_by_category as compute_entries_by_category,
    entries_last_n_days as compute_entries_last_n_days,
    entries_per_day as compute_entries_per_day,
    mood_trend as compute_mood_trend,
    days_with_entries as compute_days_with_entries,
    entries_per_category_last_n_days as compute_entries_per_category_last_n_days,
)

# üë§ Utilisateur personnalis√©
class User(AbstractUser):
    """
    Mod√®le d'utilisateur personnalis√© h√©ritant de AbstractUser de Django.
    √âtend le mod√®le utilisateur standard avec des fonctionnalit√©s suppl√©mentaires
    pour l'application de suivi personnel.
    
    API Endpoints sugg√©r√©s:
    - GET /api/users/me/ - Profil de l'utilisateur connect√©
    - PUT/PATCH /api/users/me/ - Mise √† jour du profil
    - GET /api/users/me/stats/ - Statistiques personnelles
    - GET /api/users/me/streaks/ - Information sur les s√©ries de jours cons√©cutifs
    - GET /api/users/me/dashboard/ - Donn√©es consolid√©es pour le tableau de bord
    - POST /api/auth/register/ - Cr√©ation d'un nouvel utilisateur
    - POST /api/auth/login/ - Authentification par email/mot de passe
    - POST /api/auth/refresh/ - Rafra√Æchissement du token JWT
    
    Exemple de s√©rialisation JSON:
    {
        "id": 42,
        "username": "john_doe",
        "email": "john@example.com",
        "first_name": "John",
        "last_name": "Doe",
        "date_joined": "2025-03-15T10:30:00Z",
        "stats": {
            "total_entries": 125,
            "current_streak": 8,
            "longest_streak": 15,
            "mood_average": 7.5,
            "level": 3
        }
    }
    """
    """
    ...
    Ajouts personnalis√©s :
    - avatar_url : URL de l‚Äôavatar (image de profil)
    - xp : nombre de points d‚Äôexp√©rience accumul√©s
    - level : calcul√© automatiquement en fonction des entr√©es (property)

    API Endpoints recommand√©s :
    - /api/users/me/
    - /api/users/me/dashboard/
    - /api/users/me/stats/
    - /api/users/me/xp/
    - /api/users/me/avatar/
    
    """
    email = models.EmailField(unique=True)  # Assure que chaque email est unique
    longest_streak = models.PositiveIntegerField(default=0, editable=False)  # Plus longue s√©rie de jours cons√©cutifs
    avatar_url = models.URLField(blank=True, null=True, help_text="Lien vers l'image de l'avatar")
    xp = models.PositiveIntegerField(default=0, help_text="Points d'exp√©rience cumul√©s")

    # üîê Utilisation de l'email comme identifiant principal
    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username']  # username reste requis mais pas utilis√© pour l'authentification

    class Meta:
        verbose_name = "Utilisateur"
        verbose_name_plural = "Utilisateurs"
        ordering = ['-date_joined']
        
        """
        Permissions API:
        - Un utilisateur ne peut acc√©der qu'√† ses propres donn√©es
        - Seuls les admins peuvent acc√©der √† la liste compl√®te des utilisateurs
        - Les emails et autres informations sensibles ne doivent pas √™tre expos√©s publiquement
        """

    def __str__(self):
        return self.username

    def get_full_name(self):
        """
        Retourne le nom complet de l'utilisateur.
        
        Returns:
            str: Nom complet (pr√©nom + nom)
            
        Utilisation dans l'API:
            √Ä inclure comme champ dans la s√©rialisation du profil utilisateur.
        """
        return f"{self.first_name} {self.last_name}".strip()

    def get_short_name(self):
        """
        Retourne le pr√©nom ou le username si le pr√©nom est vide.
        
        Returns:
            str: Pr√©nom ou nom d'utilisateur
            
        Utilisation dans l'API:
            Utile pour les affichages compacts ou les notifications.
        """
        return self.first_name or self.username

    def to_dict(self):
        """
        Repr√©sentation de l'utilisateur sous forme de dictionnaire (utile pour les API).
        
        Returns:
            dict: Donn√©es utilisateur format√©es
            
        Utilisation dans l'API:
            Cette m√©thode peut servir de base pour la s√©rialisation,
            mais pr√©f√©rez utiliser les s√©rialiseurs DRF pour plus de flexibilit√©.
            
        Note:
            Pour les API REST avec Django REST Framework, utilisez plut√¥t
            un s√©rialiseur d√©di√© qui √©tend cette logique et g√®re les permissions.
        """
        return {
            "id": self.id,
            "username": self.username,
            "email": self.email,
            "full_name": self.get_full_name(),
            "entries": self.total_entries(),
            "current_streak": self.current_streak(),
            "mood_average": self.mood_average(),
        }

    def total_entries(self):
        """
        Retourne le nombre total d'entr√©es de journal de l'utilisateur.
        
        Returns:
            int: Nombre total d'entr√©es
            
        Utilisation dans l'API:
            Ce champ devrait √™tre inclus dans les statistiques utilisateur
            et dans le r√©sum√© du profil.
        """
        return self.entries.count()

    def mood_average(self, days=7, reference_date=None):
        """
        Calcule la moyenne d'humeur sur les X derniers jours.
        D√©l√©gu√© √† user_stats_service.
        
        Args:
            days (int): Nombre de jours √† consid√©rer
            reference_date (date, optional): Date de r√©f√©rence (aujourd'hui par d√©faut)
            
        Returns:
            float: Moyenne d'humeur arrondie √† 1 d√©cimale, ou None si aucune entr√©e
            
        Utilisation dans l'API:
            Id√©al pour les endpoints de statistiques et le dashboard.
            Permet de filtrer par p√©riode en ajoutant un param√®tre ?days=N.
            
        Exemple dans une vue:
            @action(detail=False, methods=['get'])
            def mood_stats(self, request):
                days = int(request.query_params.get('days', 7))
                return Response({
                    'average': request.user.mood_average(days)
                })
        """
        return compute_mood_average(self, days, reference_date)

    def current_streak(self, reference_date=None):
        """
        Calcule la s√©rie actuelle de jours cons√©cutifs avec au moins une entr√©e.
        Utilise le service user_stats.
        
        Args:
            reference_date (date, optional): Date de r√©f√©rence (aujourd'hui par d√©faut)
            
        Returns:
            int: Nombre de jours cons√©cutifs avec entr√©es
            
        Utilisation dans l'API:
            Cette m√©trique est essentielle pour l'engagement utilisateur
            et devrait √™tre mise en avant dans le dashboard.
        """
        return compute_current_streak(self, reference_date)

    def has_entries_every_day(self, last_n_days=7, reference_date=None):
        """
        V√©rifie si l'utilisateur a √©crit au moins une entr√©e chaque jour 
        sur une p√©riode donn√©e.
        
        Args:
            last_n_days (int): Nombre de jours √† v√©rifier
            reference_date (date, optional): Date de r√©f√©rence (aujourd'hui par d√©faut)
            
        Returns:
            bool: True si l'utilisateur a une entr√©e pour chaque jour de la p√©riode
            
        Utilisation dans l'API:
            Utile pour v√©rifier l'admissibilit√© √† certains badges
            ou pour des indicateurs de r√©gularit√©.
        """
        return compute_entries_every_day(self, last_n_days, reference_date)

    def all_objectives_achieved(self):
        """
        V√©rifie si tous les objectifs de l'utilisateur sont coch√©s comme 'done'.
        
        Returns:
            bool: True si tous les objectifs sont achev√©s, False sinon
            
        Utilisation dans l'API:
            Peut √™tre utilis√© pour afficher une banni√®re de f√©licitations
            ou d√©bloquer un badge sp√©cial.
            
        Exemple dans un s√©rialiseur de profil:
            @property
            def all_objectives_complete(self):
                return self.instance.all_objectives_achieved()
        """
        return not self.objectives.filter(done=False).exists()

    def entries_today(self, reference_date=None):
        """
        Retourne le nombre d'entr√©es faites aujourd'hui.
        
        Args:
            reference_date (date, optional): Date de r√©f√©rence (aujourd'hui par d√©faut)
            
        Returns:
            int: Nombre d'entr√©es d'aujourd'hui
            
        Utilisation dans l'API:
            Parfait pour les widgets de r√©sum√© quotidien dans l'interface.
        """
        if reference_date is None:
            reference_date = now().date()
        return self.entries.filter(created_at__date=reference_date).count()

    def entries_by_category(self, days=None):
        """
        Renvoie une r√©partition des entr√©es par cat√©gorie.
        D√©l√©gu√© √† user_stats_service.
        
        Args:
            days (int, optional): Limite aux N derniers jours si sp√©cifi√©
            
        Returns:
            dict: Dictionnaire avec cat√©gories comme cl√©s et nombre d'entr√©es comme valeurs
            
        Utilisation dans l'API:
            Id√©al pour g√©n√©rer des graphiques de r√©partition (camembert, barres).
            
        Exemple dans une vue:
            @action(detail=False, methods=['get'])
            def category_breakdown(self, request):
                days = request.query_params.get('days')
                days = int(days) if days else None
                return Response(request.user.entries_by_category(days))
        """
        return compute_entries_by_category(self, days)

    def entries_last_n_days(self, n=7):
        """
        Retourne les entr√©es des N derniers jours.
        
        Args:
            n (int): Nombre de jours √† consid√©rer
            
        Returns:
            QuerySet: Entr√©es des n derniers jours
            
        Utilisation dans l'API:
            Cette m√©thode devrait √™tre utilis√©e dans une vue qui liste
            les entr√©es r√©centes de l'utilisateur.
            
        Note:
            Pour l'API, consid√©rez d'ajouter de la pagination √† cette m√©thode
            car elle peut retourner un grand nombre d'entr√©es.
        """
        return compute_entries_last_n_days(self, n)

    def entries_per_day(self, n=7):
        """
        Calcule le nombre d'entr√©es par jour pour les N derniers jours.
        
        Args:
            n (int): Nombre de jours √† consid√©rer
            
        Returns:
            dict: Dictionnaire avec dates comme cl√©s et nombre d'entr√©es comme valeurs
            
        Utilisation dans l'API:
            Parfait pour g√©n√©rer des graphiques d'activit√© journali√®re.
        """
        return compute_entries_per_day(self, n)

    def mood_trend(self, n=7):
        """
        Renvoie l'√©volution moyenne de l'humeur par jour sur les N derniers jours.
        
        Args:
            n (int): Nombre de jours √† consid√©rer
            
        Returns:
            dict: Dictionnaire avec dates comme cl√©s et moyennes d'humeur comme valeurs
            
        Utilisation dans l'API:
            Id√©al pour les graphiques lin√©aires montrant l'√©volution de l'humeur.
            
        Exemple dans une vue:
            @action(detail=False, methods=['get'])
            def mood_evolution(self, request):
                days = int(request.query_params.get('days', 7))
                return Response(request.user.mood_trend(days))
        """
        return compute_mood_trend(self, n)

    def days_with_entries(self, n=30):
        """
        Liste des jours ayant au moins une entr√©e sur les N derniers jours.
        
        Args:
            n (int): Nombre de jours √† consid√©rer
            
        Returns:
            list: Liste des dates avec au moins une entr√©e
            
        Utilisation dans l'API:
            Parfait pour g√©n√©rer des visualisations de type calendrier
            ou des heatmaps d'activit√©.
        """
        return compute_days_with_entries(self, n)

    def entries_per_category_last_n_days(self, n=7):
        """
        R√©partition des entr√©es par cat√©gorie sur les N derniers jours.
        
        Args:
            n (int): Nombre de jours √† consid√©rer
            
        Returns:
            dict: Dictionnaire avec cat√©gories comme cl√©s et nombre d'entr√©es comme valeurs
            
        Utilisation dans l'API:
            Utile pour des comparaisons de r√©partition sur une p√©riode sp√©cifique.
        """
        return compute_entries_per_category_last_n_days(self, n)

    def update_badges(self):
        """
        Met √† jour les badges d√©bloqu√©s pour l'utilisateur.
        Logique d√©port√©e dans badge_service.
        
        Utilisation dans l'API:
            Cette m√©thode devrait √™tre appel√©e apr√®s certaines actions utilisateur
            (nouvelle entr√©e, objectif atteint, etc.) via un signal ou dans la vue.
            
        Exemple dans une vue d'ajout d'entr√©e:
            def perform_create(self, serializer):
                entry = serializer.save(user=self.request.user)
                self.request.user.update_badges()
                return entry
        """
        update_user_badges(self)

    def update_streaks(self):
        """
        Met √† jour la plus longue s√©rie d'entr√©es cons√©cutives si n√©cessaire.
        Utilise streak_service.
        
        Utilisation dans l'API:
            √Ä appeler apr√®s chaque ajout ou suppression d'entr√©e,
            id√©alement via un signal pour maintenir la coh√©rence des donn√©es.
        """
        update_user_streak(self)

    def create_default_preferences(self):
        """
        Cr√©e les pr√©f√©rences utilisateur par d√©faut si elles n'existent pas.
        Appelle preferences_service.
        
        Returns:
            UserPreference: L'objet de pr√©f√©rences (cr√©√© ou existant)
            
        Utilisation dans l'API:
            Cette m√©thode devrait √™tre appel√©e dans le signal post_save
            du mod√®le User pour garantir que chaque utilisateur a des pr√©f√©rences.
            
        Note technique:
            Dans Django REST Framework, c'est une bonne pratique d'inclure
            cette logique dans un signal plut√¥t que dans les vues.
        """
        return create_preferences_for_user(self)
        
    @property
    def level(self):
        """
        Calcule le niveau actuel de l'utilisateur bas√© sur le nombre d'entr√©es.
        
        Returns:
            int: Niveau utilisateur (1-N)
            
        Utilisation dans l'API:
            Ce champ calcul√© devrait √™tre inclus dans le profil utilisateur
            et potentiellement dans les en-t√™tes ou la navigation.
            
        Exemple dans un s√©rialiseur:
            class UserProfileSerializer(serializers.ModelSerializer):
                level = serializers.ReadOnlyField()
                
                class Meta:
                    model = User
                    fields = ['username', 'email', 'level', ...]
        """
        # Niveau bas√© sur le nombre d'entr√©es
        entries = self.total_entries()
        
        # Seuils pour chaque niveau
        thresholds = [0, 5, 10, 20, 35, 50, 75, 100, 150, 200, 300, 500]
        
        # D√©terminer le niveau
        for level, min_entries in enumerate(thresholds):
            if entries < min_entries:
                return max(1, level)  # Minimum niveau 1
                
        # Si au-del√† du dernier seuil
        return len(thresholds)
        
    def get_dashboard_data(self):
        """
        Rassemble les donn√©es principales pour le tableau de bord utilisateur.
        
        Returns:
            dict: Donn√©es consolid√©es pour le dashboard
                {
                    "total_entries": 125,
                    "current_streak": 8,
                    "longest_streak": 15,
                    "mood_average": 7.5,
                    "level": 3,
                    "today_entries": 2,
                    "objectives": {
                        "total": 10,
                        "completed": 6,
                        "pending": 4
                    },
                    "badges": {
                        "unlocked": 8,
                        "total": 15,
                        "recent": [...]
                    },
                    "mood_trend": {...},
                    "categories": {...}
                }
                
        Utilisation dans l'API:
            Id√©al pour un endpoint unique qui alimente le tableau de bord principal.
            
        Exemple dans une vue:
            @action(detail=False, methods=['get'])
            def dashboard(self, request):
                return Response(request.user.get_dashboard_data())
        """
        # Statistiques de base
        total_entries = self.total_entries()
        current_streak = self.current_streak()
        
        # Objectifs
        objectives = self.objectives.all()
        total_objectives = objectives.count()
        completed_objectives = objectives.filter(done=True).count()
        
        # Badges r√©cemment d√©bloqu√©s (3 derniers)
        recent_badges = self.badges.order_by('-date_obtenue')[:3].values(
            'name', 'description', 'icon', 'date_obtenue'
        )
        
        # Donn√©es consolid√©es
        return {
            "total_entries": total_entries,
            "current_streak": current_streak,
            "longest_streak": self.longest_streak,
            "mood_average": self.mood_average(7),
            "level": self.level,
            "today_entries": self.entries_today(),
            "objectives": {
                "total": total_objectives,
                "completed": completed_objectives,
                "pending": total_objectives - completed_objectives
            },
            "badges": {
                "unlocked": self.badges.count(),
                "total": 15,  # Id√©alement calcul√© dynamiquement
                "recent": list(recent_badges)
            },
            "mood_trend": self.mood_trend(7),
            "categories": self.entries_by_category(7)
        }
    
    def add_xp(self, amount):
        """
        Ajoute des points d‚Äôexp√©rience √† l‚Äôutilisateur.

        Args:
            amount (int): Nombre de points √† ajouter.

        Utilisation dans l‚ÄôAPI :
            √Ä appeler apr√®s certaines actions utilisateurs (ex: ajout d‚Äôentr√©e, objectif atteint).
            Permet de cr√©er un syst√®me de progression bas√© sur le comportement utilisateur.
        
        Exemple :
            user.add_xp(10)
        """
        self.xp += amount
        self.save(update_fields=['xp'])

