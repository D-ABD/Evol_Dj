from datetime import timedelta
from django.db import models
from django.utils.timezone import now
from django.core.validators import MinValueValidator
from django.core.exceptions import ValidationError
from .notification_model import Notification

from django.conf import settings
User = settings.AUTH_USER_MODEL


# üéØ Objectif utilisateur
class Objective(models.Model):
    """
    Mod√®le repr√©sentant un objectif d√©fini par l'utilisateur.
    Permet de suivre les progr√®s vers des objectifs sp√©cifiques.
    
    API Endpoints sugg√©r√©s:
    - GET /api/objectives/ - Liste des objectifs de l'utilisateur
    - POST /api/objectives/ - Cr√©er un nouvel objectif
    - GET /api/objectives/{id}/ - D√©tails d'un objectif sp√©cifique
    - PUT/PATCH /api/objectives/{id}/ - Modifier un objectif existant
    - DELETE /api/objectives/{id}/ - Supprimer un objectif
    - POST /api/objectives/{id}/complete/ - Marquer un objectif comme compl√©t√©
    - GET /api/objectives/stats/ - Statistiques sur les objectifs (par cat√©gorie, par √©tat)
    - GET /api/objectives/upcoming/ - Objectifs dont l'√©ch√©ance approche
    
    Exemple de s√©rialisation JSON:
    {
        "id": 42,
        "title": "Faire 5 s√©ances de sport",
        "category": "Sant√©",
        "done": false,
        "target_date": "2025-04-25",
        "target_value": 5,
        "created_at": "2025-04-19T17:30:10Z",
        "progress": 60,
        "entries_done": 3,
        "days_remaining": 6,
        "is_overdue": false
    }
    """

    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="objectives")
    title = models.CharField(max_length=255)  # Titre de l'objectif
    category = models.CharField(max_length=100)  # Cat√©gorie de l'objectif
    done = models.BooleanField(default=False)  # √âtat de compl√©tion
    target_date = models.DateField()  # Date cible pour atteindre l'objectif
    target_value = models.PositiveIntegerField(default=1, verbose_name="Objectif √† atteindre", validators=[MinValueValidator(1)])  # Valeur √† atteindre
    created_at = models.DateTimeField(auto_now_add=True)  # Date de cr√©ation

    class Meta:
        verbose_name = "Objectif"
        verbose_name_plural = "Objectifs"
        ordering = ['target_date', 'done']
        
        """
        Filtres API recommand√©s:
        - done (boolean)
        - category (exact, in)
        - target_date (gte, lte, range)
        - is_overdue (boolean calcul√©: target_date < today && !done)
        
        Permissions API:
        - Un utilisateur ne doit voir et modifier que ses propres objectifs
        """

    def __str__(self):
        """Repr√©sentation en cha√Æne de caract√®res de l'objectif avec indicateur d'ach√®vement"""
        return f"{self.title} ({'‚úÖ' if self.done else 'üïì'})"

    def entries_done(self):
        """
        Compte le nombre d'entr√©es correspondant √† la cat√©gorie de cet objectif
        pour la date cible.

        Returns:
            int: Nombre d'entr√©es correspondant aux crit√®res
            
        Utilisation dans l'API:
            Ce champ devrait √™tre inclus comme champ calcul√© dans la s√©rialisation
            pour afficher la progression de l'utilisateur vers cet objectif.
        """
        return self.user.entries.filter(
            category=self.category,
            created_at__date=self.target_date
        ).count()

    def progress(self):
        """
        Calcule le pourcentage de progression vers l'objectif.

        Returns:
            int: Pourcentage de progression (0-100)
            
        Utilisation dans l'API:
            Id√©al pour afficher une barre de progression dans l'interface.
            Inclure ce champ calcul√© dans la s√©rialisation.
            
        Exemple dans un s√©rialiseur:
            def get_progress(self, obj):
                return obj.progress()
        """
        if self.target_value > 0:
            return min(100, int((self.entries_done() / self.target_value) * 100))
        return 0

    def is_achieved(self):
        """
        V√©rifie si l'objectif est atteint (marqu√© comme fait ou progression √† 100%).

        Returns:
            bool: True si l'objectif est atteint, False sinon
            
        Utilisation dans l'API:
            Ce champ peut √™tre utilis√© comme champ calcul√© pour d√©terminer
            si un objectif devrait √™tre automatiquement marqu√© comme compl√©t√©.
        """
        return self.done or self.progress() >= 100
        
    def days_remaining(self):
        """
        Calcule le nombre de jours restants avant la date cible.
        
        Returns:
            int: Nombre de jours jusqu'√† la date cible (n√©gatif si d√©pass√©e)
            
        Utilisation dans l'API:
            Utile pour afficher le temps restant et pour trier les objectifs
            par urgence dans l'interface utilisateur.
        """
        return (self.target_date - now().date()).days
        
    def is_overdue(self):
        """
        V√©rifie si l'objectif est en retard (date cible d√©pass√©e sans √™tre compl√©t√©).
        
        Returns:
            bool: True si l'objectif est en retard, False sinon
            
        Utilisation dans l'API:
            Ce champ calcul√© permet d'afficher des indicateurs visuels
            pour les objectifs en retard dans l'interface.
        """
        return not self.done and self.target_date < now().date()

    def save(self, *args, **kwargs):
        """
        Surcharge pour mettre √† jour l'√©tat 'done' automatiquement si l'objectif est atteint.
        Une notification est cr√©√©e uniquement si l'objectif vient d'√™tre compl√©t√©.
        
        Utilisation dans l'API:
            La logique de notification est automatiquement g√©r√©e lors de la sauvegarde,
            mais le param√®tre create_notification peut √™tre utilis√© pour d√©sactiver ce comportement.
            
        Exemple dans une vue API:
            @action(detail=True, methods=['post'])
            def complete(self, request, pk=None):
                objective = self.get_object()
                objective.done = True
                objective.save()  # Notification cr√©√©e automatiquement
                return Response(self.get_serializer(objective).data)
        """
        was_not_done = self.pk is not None and not self.done
        is_achievement = not self.done and self.is_achieved()
        
        if is_achievement:
            self.done = True

            # Cr√©e une notification si ce n'est pas d√©sactiv√© explicitement
            create_notification = kwargs.pop('create_notification', True)
            if create_notification:
                Notification.objects.create(
                    user=self.user,
                    message=f"üéØ Objectif atteint : {self.title}",
                    notif_type="objectif"
                )

        super().save(*args, **kwargs)
        
    @classmethod
    def get_upcoming(cls, user, days=7):
        """
        R√©cup√®re les objectifs dont l'√©ch√©ance approche dans les prochains jours.
        
        Args:
            user (User): L'utilisateur concern√©
            days (int): Nombre de jours √† anticiper
            
        Returns:
            QuerySet: Objectifs √† √©ch√©ance dans la p√©riode sp√©cifi√©e
            
        Utilisation dans l'API:
            Parfait pour un endpoint qui affiche les objectifs urgents
            ou pour envoyer des rappels.
            
        Exemple dans une vue:
            @action(detail=False, methods=['get'])
            def upcoming(self, request):
                days = int(request.query_params.get('days', 7))
                objectives = Objective.get_upcoming(request.user, days)
                return Response(self.get_serializer(objectives, many=True).data)
        """
        today = now().date()
        deadline = today + timedelta(days=days)
        
        return cls.objects.filter(
            user=user,
            done=False,
            target_date__gte=today,
            target_date__lte=deadline
        ).order_by('target_date')
        
    @classmethod
    def get_statistics(cls, user):
        """
        Calcule des statistiques sur les objectifs de l'utilisateur.
        
        Args:
            user (User): L'utilisateur concern√©
            
        Returns:
            dict: Statistiques calcul√©es sur les objectifs
                {
                    'total': 42,
                    'completed': 28,
                    'completion_rate': 66.7,
                    'overdue': 5,
                    'by_category': {
                        'Sant√©': {'total': 15, 'completed': 10},
                        'Travail': {'total': 12, 'completed': 8},
                        ...
                    }
                }
                
        Utilisation dans l'API:
            Id√©al pour un dashboard ou un endpoint de statistiques.
            
        Exemple dans une vue:
            @action(detail=False, methods=['get'])
            def statistics(self, request):
                return Response(Objective.get_statistics(request.user))
        """
        from django.db.models import Count, Case, When, IntegerField
        
        # Statistiques globales
        objectives = cls.objects.filter(user=user)
        total = objectives.count()
        completed = objectives.filter(done=True).count()
        
        # Statistiques par cat√©gorie
        by_category = objectives.values('category').annotate(
            total=Count('id'),
            completed=Count(Case(When(done=True, then=1), output_field=IntegerField()))
        ).order_by('-total')
        
        # Objectifs en retard
        overdue = objectives.filter(
            done=False,
            target_date__lt=now().date()
        ).count()
        
        # Calcul du taux de compl√©tion
        completion_rate = (completed / total * 100) if total > 0 else 0
        
        return {
            'total': total,
            'completed': completed,
            'completion_rate': round(completion_rate, 1),
            'overdue': overdue,
            'by_category': {
                item['category']: {'total': item['total'], 'completed': item['completed']} 
                for item in by_category
            }
        }