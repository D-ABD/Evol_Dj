# MyEvol_app/models/event_log_model.py

from datetime import timedelta
from django.db import models
from django.utils.timezone import now
from django.urls import reverse
from django.conf import settings
from django.db.models import Count
import logging

logger = logging.getLogger(__name__)
User = settings.AUTH_USER_MODEL


class EventLog(models.Model):
    """
    üìã Journalisation des √©v√©nements syst√®me ou utilisateur.
    
    Ce mod√®le trace toutes les actions notables de l'application, que ce soit c√¥t√© utilisateur
    (ex : "connexion", "attribution_badge") ou c√¥t√© syst√®me (ex : "nettoyage_quotidien").

    ‚úÖ Objectifs :
    - Faciliter l‚Äôaudit et le debug
    - Offrir des statistiques d‚Äôusage
    - Suivre les √©v√©nements critiques

    üîó Endpoints API recommand√©s :
    - GET /api/logs/
    - GET /api/users/{id}/logs/
    - GET /api/logs/statistics/

    üîß Champs calcul√©s √† exposer :
    - temps_√©coul√© (depuis l‚Äô√©v√©nement)
    - r√©sum√© (action + date)
    
    üì¶ Services li√©s :
    - Peut √™tre appel√© depuis n‚Äôimporte quel service via `EventLog.log_action(...)`
    """
    
    SEVERITY_CHOICES = [
        ('INFO', 'Information'),
        ('WARN', 'Warning'),
        ('ERROR', 'Error'),
        ('CRITICAL', 'Critical'),
    ]
    
    user = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        null=True,
        blank=True,
        related_name="event_logs",
        help_text="Utilisateur concern√© par l‚Äô√©v√©nement (optionnel pour les logs syst√®me)"
    )
    action = models.CharField(
        max_length=255,
        help_text="Type d'action enregistr√©e (ex : 'connexion', 'attribution_badge')"
    )
    description = models.TextField(
        blank=True,
        help_text="D√©tail ou message libre sur l'√©v√©nement"
    )
    created_at = models.DateTimeField(
        auto_now_add=True,
        help_text="Horodatage de l‚Äô√©v√©nement (g√©n√©r√© automatiquement)"
    )
    metadata = models.JSONField(
        null=True,
        blank=True,
        help_text="Donn√©es additionnelles li√©es √† l‚Äô√©v√©nement (ex : id d‚Äôun badge, dur√©e, etc.)"
    )
    severity = models.CharField(
        max_length=10,
        choices=SEVERITY_CHOICES,
        default='INFO',
        help_text="Niveau de gravit√© de l'√©v√©nement"
    )

    class Meta:
        ordering = ['-created_at']
        verbose_name = "√âv√©nement"
        verbose_name_plural = "√âv√©nements"
        indexes = [
            models.Index(fields=["user", "action"]),
            models.Index(fields=["created_at"]),
        ]

    def __str__(self):
        return f"{self.created_at:%Y-%m-%d %H:%M} - {self.action}"

    def __repr__(self):
        return f"<EventLog id={self.id} action='{self.action}' user='{self.user}' at='{self.created_at}'>"

    def get_absolute_url(self):
        return reverse("eventlog-detail", kwargs={"pk": self.pk})

    @classmethod
    def log_action(cls, action, description="", user=None, severity="INFO", **metadata):
        """
        ‚úÖ Cr√©e un log d‚Äô√©v√©nement, appel√© depuis services/signaux/vues.

        Args:
            action (str): Type d‚Äôaction enregistr√©e
            description (str): D√©tail compl√©mentaire de l‚Äô√©v√©nement
            user (User, optional): Utilisateur concern√©
            severity (str): Gravit√© de l'√©v√©nement (INFO, WARN, ERROR, CRITICAL)
            **metadata (dict): Donn√©es personnalis√©es stock√©es en JSON

        Returns:
            EventLog: Instance sauvegard√©e
        """
        log = cls.objects.create(
            action=action,
            description=description,
            user=user,
            severity=severity,
            metadata=metadata or None
        )
        username = getattr(user, 'username', 'System')
        logger.info(f"[LOG] {username} > {action} > {description} > Severity: {severity}")
        return log

    @classmethod
    def get_action_counts(cls, days=30, user=None):
        """
        üìä Statistiques agr√©g√©es des √©v√©nements.

        Args:
            days (int): Nombre de jours √† consid√©rer depuis aujourd‚Äôhui
            user (User, optional): Filtrer les √©v√©nements par utilisateur

        Returns:
            dict: Cl√©s = action, Valeurs = nombre d‚Äôoccurrences

        Exemple :
            {'connexion': 31, 'attribution_badge': 12}
        """
        since = now() - timedelta(days=days)
        qs = cls.objects.filter(created_at__gte=since)
        if user:
            qs = qs.filter(user=user)
        return dict(qs.values("action").annotate(count=Count("id")).values_list("action", "count"))

    def has_metadata(self):
        return bool(self.metadata)
