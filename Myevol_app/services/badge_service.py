# services/badge_service.py

import logging
from typing import List, Optional
from ..models.badge_model import Badge, BadgeTemplate
from ..models.event_log_model import EventLog

logger = logging.getLogger(__name__)

def update_user_badges(user, *, log_events: bool = True, return_new_badges: bool = False) -> Optional[List[Badge]]:
    """
    V√©rifie tous les BadgeTemplates disponibles et attribue les badges √©ligibles √† l‚Äôutilisateur.

    Args:
        user (User): L'utilisateur pour lequel v√©rifier et attribuer les badges.
        log_events (bool, optional): Si True, un EventLog est cr√©√© pour chaque badge attribu√©. (D√©faut: True)
        return_new_badges (bool, optional): Si True, retourne la liste des nouveaux badges cr√©√©s. (D√©faut: False)

    Returns:
        Optional[List[Badge]]: Liste des badges nouvellement cr√©√©s si return_new_badges est True.
        Sinon, retourne None.

    Comportement :
        - R√©cup√®re les badges d√©j√† obtenus par l'utilisateur.
        - Parcourt tous les BadgeTemplates :
            - Ignore ceux d√©j√† obtenus.
            - V√©rifie si les conditions d'obtention sont remplies.
            - Cr√©e un nouveau Badge si √©ligible.
            - Logue l'√©v√©nement et une entr√©e dans EventLog si demand√©.
        - En cas d'erreur √† la cr√©ation d'un badge, retourne une liste vide imm√©diatement.
        - Si aucun nouveau badge n'est cr√©√©, logue une info.

    Exemple d'usage :
        >>> update_user_badges(user, log_events=True, return_new_badges=True)
    """
    existing_badge_names = set(user.badges.values_list("name", flat=True))
    new_badges = []

    for template in BadgeTemplate.objects.all():
        if template.name in existing_badge_names:
            continue  # L'utilisateur a d√©j√† ce badge

        if template.check_unlock(user):
            try:
                badge = __create_badge(user, template)
                new_badges.append(badge)

                if log_events:
                    EventLog.objects.create(
                        user=user,
                        action="attribution_auto_badge",
                        description=f"Badge automatique '{template.name}' attribu√© √† {user.username}"
                    )

                logger.info(f"[BADGE] ‚úÖ {user.username} a d√©bloqu√© : {template.name}")

            except Exception as e:
                logger.error(f"[BADGE] ‚ùå Erreur pour '{template.name}' ‚Üí {user.username}: {e}")
                return []  # üî• Important : retour imm√©diat si erreur

    if log_events and not new_badges:
        logger.info(f"[BADGE] Aucun nouveau badge attribu√© √† {user.username}")

    if return_new_badges and new_badges:
        logger.debug(f"Badges retourn√©s pour {user.username} : {[b.name for b in new_badges]}")

    return new_badges if return_new_badges else None

    



def __create_badge(user, template: BadgeTemplate) -> Badge:
    """
    Cr√©e un badge pour un utilisateur √† partir d‚Äôun template.

    Args:
        user (User): Utilisateur √† qui le badge est attribu√©
        template (BadgeTemplate): Mod√®le de badge (crit√®res, nom, ic√¥ne, etc.)

    Returns:
        Badge: Le badge nouvellement cr√©√© et enregistr√©
    """
    return Badge.objects.create(
        user=user,
        name=template.name,
        icon=template.icon,
        description=template.description,
        level=template.level,
    )
