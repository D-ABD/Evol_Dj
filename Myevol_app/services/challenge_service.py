# Myevol_app/services/challenge_service.py

# services/challenge_service.py

import logging
from ..models import ChallengeProgress, Challenge, Notification
from django.utils.timezone import now

logger = logging.getLogger(__name__)

def update_challenge_progress(progress_instance):
    """
    Met √† jour la progression d'un utilisateur sur un d√©fi.
    Cette m√©thode v√©rifie si un utilisateur a compl√©t√© son d√©fi, envoie des notifications,
    et enregistre l'√©tat de compl√©tion.

    Args:
        progress_instance (ChallengeProgress): Instance de progression du d√©fi
    """
    # V√©rifie si l'utilisateur a atteint son objectif
    challenge = progress_instance.challenge
    user = progress_instance.user

    if not progress_instance.completed and challenge.is_completed(user):
        progress_instance.completed = True
        progress_instance.completed_at = now()
        progress_instance.save()

        # Notifie l'utilisateur que le d√©fi est termin√©
        Notification.objects.create(
            user=user,
            message=f"üéØ F√©licitations ! Vous avez compl√©t√© le d√©fi : {challenge.title}",
            notif_type="objectif"
        )

        logger.info(f"[CHALLENGE] {user.username} a compl√©t√© le d√©fi '{challenge.title}'")

def check_user_challenges(user):
    """
    V√©rifie tous les d√©fis actifs de l'utilisateur et met √† jour sa progression.
    Cette fonction peut √™tre appel√©e r√©guli√®rement pour v√©rifier l'√©tat de tous les d√©fis de l'utilisateur.

    Args:
        user (User): Utilisateur dont les d√©fis doivent √™tre v√©rifi√©s
    """
    today = now().date()

    # R√©cup√®re tous les d√©fis actifs
    active_challenges = Challenge.objects.filter(start_date__lte=today, end_date__gte=today)

    for challenge in active_challenges:
        # R√©cup√®re ou cr√©e une instance de progression pour chaque d√©fi
        progress, created = ChallengeProgress.objects.get_or_create(user=user, challenge=challenge)

        # Si c'est une nouvelle progression, on v√©rifie si l'utilisateur a d√©j√† atteint l'objectif
        if created:
            logger.info(f"[CHALLENGE] Progression cr√©√©e pour {user.username} sur le d√©fi '{challenge.title}'")
        else:
            logger.info(f"[CHALLENGE] Progression mise √† jour pour {user.username} sur le d√©fi '{challenge.title}'")

        # Met √† jour la progression de l'utilisateur
        update_challenge_progress(progress)

def check_challenges(user):
    """
    V√©rifie tous les d√©fis actifs de l'utilisateur et met √† jour leur progression.
    Cette fonction est appel√©e apr√®s la cr√©ation d'une entr√©e de journal.
    
    Args:
        user (User): L'utilisateur dont les d√©fis doivent √™tre v√©rifi√©s
    """
    # Pas besoin d'importer check_user_challenges car elle est d√©j√† dans ce module
    return check_user_challenges(user)