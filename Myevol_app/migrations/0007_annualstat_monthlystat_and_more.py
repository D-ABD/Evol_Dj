# Generated by Django 4.2.20 on 2025-04-21 18:34

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('Myevol_app', '0006_alter_journalentry_category_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnnualStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_start', models.DateField(help_text="Premier jour de l'année")),
                ('entries_count', models.PositiveIntegerField(help_text="Nombre total d'entrées pour l'année")),
                ('mood_average', models.FloatField(blank=True, help_text="Moyenne des humeurs de l'année", null=True)),
                ('categories', models.JSONField(blank=True, default=dict, help_text='Répartition des entrées par catégorie')),
            ],
            options={
                'verbose_name': 'Statistique annuelle',
                'verbose_name_plural': 'Statistiques annuelles',
                'ordering': ['-year_start'],
            },
        ),
        migrations.CreateModel(
            name='MonthlyStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month_start', models.DateField(help_text='Premier jour du mois')),
                ('entries_count', models.PositiveIntegerField(help_text="Nombre total d'entrées pour le mois")),
                ('mood_average', models.FloatField(blank=True, help_text='Moyenne des humeurs du mois', null=True)),
                ('categories', models.JSONField(blank=True, default=dict, help_text='Répartition des entrées par catégorie')),
            ],
            options={
                'verbose_name': 'Statistique mensuelle',
                'verbose_name_plural': 'Statistiques mensuelles',
                'ordering': ['-month_start'],
            },
        ),
        migrations.AlterModelOptions(
            name='challengeprogress',
            options={'verbose_name': 'Progression de défi', 'verbose_name_plural': 'Progressions de défi'},
        ),
        migrations.AddField(
            model_name='eventlog',
            name='severity',
            field=models.CharField(choices=[('INFO', 'Information'), ('WARN', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], default='INFO', help_text="Niveau de gravité de l'événement", max_length=10),
        ),
        migrations.AlterField(
            model_name='badge',
            name='date_obtenue',
            field=models.DateField(auto_now_add=True, help_text='Date à laquelle le badge a été obtenu'),
        ),
        migrations.AlterField(
            model_name='badge',
            name='description',
            field=models.TextField(help_text='Texte explicatif du badge (accomplissement)'),
        ),
        migrations.AlterField(
            model_name='badge',
            name='icon',
            field=models.CharField(help_text='Emoji ou nom d’icône visuelle pour le badge', max_length=100),
        ),
        migrations.AlterField(
            model_name='badge',
            name='level',
            field=models.PositiveIntegerField(blank=True, help_text='Niveau associé au badge (optionnel)', null=True),
        ),
        migrations.AlterField(
            model_name='badge',
            name='name',
            field=models.CharField(help_text='Nom du badge affiché à l’utilisateur', max_length=100),
        ),
        migrations.AlterField(
            model_name='badge',
            name='user',
            field=models.ForeignKey(help_text='Utilisateur à qui ce badge a été attribué', on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='badgetemplate',
            name='animation_url',
            field=models.URLField(blank=True, help_text='URL d’une animation Lottie ou GIF', null=True),
        ),
        migrations.AlterField(
            model_name='badgetemplate',
            name='color_theme',
            field=models.CharField(default='#FFD700', help_text='Couleur HEX du thème visuel du badge', max_length=20),
        ),
        migrations.AlterField(
            model_name='badgetemplate',
            name='condition',
            field=models.CharField(help_text='Condition textuelle d’obtention du badge', max_length=255),
        ),
        migrations.AlterField(
            model_name='badgetemplate',
            name='description',
            field=models.TextField(help_text='Description du badge visible dans l’interface'),
        ),
        migrations.AlterField(
            model_name='badgetemplate',
            name='icon',
            field=models.CharField(help_text='Emoji ou identifiant visuel de l’icône', max_length=100),
        ),
        migrations.AlterField(
            model_name='badgetemplate',
            name='level',
            field=models.PositiveIntegerField(blank=True, help_text="Niveau cible (optionnel, utile pour les badges de type 'Niveau X')", null=True),
        ),
        migrations.AlterField(
            model_name='badgetemplate',
            name='name',
            field=models.CharField(help_text="Nom unique du badge (ex: 'Régulier', 'Niveau 3')", max_length=100, unique=True),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='description',
            field=models.TextField(help_text='Description du défi et règles à suivre'),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='target_entries',
            field=models.PositiveIntegerField(default=5, help_text="Nombre d'entrées à réaliser pour réussir le défi"),
        ),
        migrations.AlterField(
            model_name='challenge',
            name='title',
            field=models.CharField(help_text="Titre du défi affiché à l'utilisateur", max_length=255),
        ),
        migrations.AlterField(
            model_name='challengeprogress',
            name='challenge',
            field=models.ForeignKey(help_text='Défi concerné', on_delete=django.db.models.deletion.CASCADE, related_name='progresses', to='Myevol_app.challenge'),
        ),
        migrations.AlterField(
            model_name='challengeprogress',
            name='completed',
            field=models.BooleanField(default=False, help_text='Statut de complétion du défi'),
        ),
        migrations.AlterField(
            model_name='challengeprogress',
            name='completed_at',
            field=models.DateTimeField(blank=True, help_text='Date de complétion', null=True),
        ),
        migrations.AlterField(
            model_name='challengeprogress',
            name='user',
            field=models.ForeignKey(help_text='Utilisateur lié à ce défi', on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='dailystat',
            name='categories',
            field=models.JSONField(blank=True, default=dict, help_text='Répartition des entrées par catégorie'),
        ),
        migrations.AlterField(
            model_name='dailystat',
            name='date',
            field=models.DateField(help_text='La date des statistiques'),
        ),
        migrations.AlterField(
            model_name='dailystat',
            name='entries_count',
            field=models.PositiveIntegerField(default=0, help_text="Nombre total d'entrées pour la journée"),
        ),
        migrations.AlterField(
            model_name='dailystat',
            name='mood_average',
            field=models.FloatField(blank=True, help_text='Moyenne des humeurs de la journée', null=True),
        ),
        migrations.AlterField(
            model_name='eventlog',
            name='action',
            field=models.CharField(help_text="Type d'action enregistrée (ex : 'connexion', 'attribution_badge')", max_length=255),
        ),
        migrations.AlterField(
            model_name='eventlog',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, help_text='Horodatage de l’événement (généré automatiquement)'),
        ),
        migrations.AlterField(
            model_name='eventlog',
            name='description',
            field=models.TextField(blank=True, help_text="Détail ou message libre sur l'événement"),
        ),
        migrations.AlterField(
            model_name='eventlog',
            name='metadata',
            field=models.JSONField(blank=True, help_text='Données additionnelles liées à l’événement (ex : id d’un badge, durée, etc.)', null=True),
        ),
        migrations.AlterField(
            model_name='eventlog',
            name='user',
            field=models.ForeignKey(blank=True, help_text='Utilisateur concerné par l’événement (optionnel pour les logs système)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_logs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='journalentry',
            name='category',
            field=models.CharField(help_text="La catégorie de l'entrée (ex : Travail, Santé)", max_length=100, verbose_name='Catégorie'),
        ),
        migrations.AlterField(
            model_name='journalentry',
            name='content',
            field=models.TextField(help_text='Le contenu de l’entrée de journal', verbose_name="Qu'avez-vous accompli aujourd'hui ?"),
        ),
        migrations.AlterField(
            model_name='journalentry',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, help_text='Date et heure de création de l’entrée'),
        ),
        migrations.AlterField(
            model_name='journalentry',
            name='mood',
            field=models.IntegerField(choices=[(1, '1/10'), (2, '2/10'), (3, '3/10'), (4, '4/10'), (5, '5/10'), (6, '6/10'), (7, '7/10'), (8, '8/10'), (9, '9/10'), (10, '10/10')], help_text="La note d'humeur (de 1 à 10) associée à cette entrée", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name="Note d'humeur"),
        ),
        migrations.AlterField(
            model_name='journalentry',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière mise à jour'),
        ),
        migrations.AlterField(
            model_name='journalentry',
            name='user',
            field=models.ForeignKey(help_text='Utilisateur concerné par l’entrée', on_delete=django.db.models.deletion.CASCADE, related_name='entries', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='notification',
            name='archived',
            field=models.BooleanField(default=False, help_text='Indique si la notification est archivée'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, help_text='Date de création de la notification'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='is_read',
            field=models.BooleanField(default=False, help_text='Indique si la notification a été lue'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='message',
            field=models.TextField(help_text='Contenu de la notification'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='notif_type',
            field=models.CharField(choices=[('badge', 'Badge débloqué'), ('objectif', 'Objectif atteint'), ('statistique', 'Mise à jour statistique'), ('info', 'Information générale')], default='info', help_text='Type de notification', max_length=20),
        ),
        migrations.AlterField(
            model_name='notification',
            name='read_at',
            field=models.DateTimeField(blank=True, help_text='Date de lecture de la notification', null=True),
        ),
        migrations.AlterField(
            model_name='notification',
            name='scheduled_at',
            field=models.DateTimeField(blank=True, help_text="Date programmée pour l'envoi de la notification", null=True),
        ),
        migrations.AlterField(
            model_name='objective',
            name='category',
            field=models.CharField(help_text="Catégorie de l'objectif.", max_length=100),
        ),
        migrations.AlterField(
            model_name='objective',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, help_text="Date de création de l'objectif."),
        ),
        migrations.AlterField(
            model_name='objective',
            name='done',
            field=models.BooleanField(default=False, help_text="Indique si l'objectif est atteint."),
        ),
        migrations.AlterField(
            model_name='objective',
            name='target_date',
            field=models.DateField(help_text="Date cible pour atteindre l'objectif."),
        ),
        migrations.AlterField(
            model_name='objective',
            name='target_value',
            field=models.PositiveIntegerField(default=1, help_text="Nombre d'actions nécessaires pour accomplir l'objectif.", validators=[django.core.validators.MinValueValidator(1)], verbose_name='Objectif à atteindre'),
        ),
        migrations.AlterField(
            model_name='objective',
            name='title',
            field=models.CharField(help_text="Titre de l'objectif.", max_length=255),
        ),
        migrations.AlterField(
            model_name='quote',
            name='author',
            field=models.CharField(blank=True, help_text="L'auteur de la citation.", max_length=255),
        ),
        migrations.AlterField(
            model_name='quote',
            name='text',
            field=models.TextField(help_text='Le texte de la citation.'),
        ),
        migrations.AlterField(
            model_name='user',
            name='avatar_url',
            field=models.URLField(blank=True, help_text="URL de l'image de l'avatar de l'utilisateur.", null=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(help_text="L'email de l'utilisateur, utilisé pour l'authentification.", max_length=254, unique=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='longest_streak',
            field=models.PositiveIntegerField(default=0, editable=False, help_text="La plus longue série d'entrées consécutives."),
        ),
        migrations.AlterField(
            model_name='user',
            name='xp',
            field=models.PositiveIntegerField(default=0, help_text="Le nombre total de points d'expérience cumulés par l'utilisateur."),
        ),
        migrations.AlterField(
            model_name='userpreference',
            name='accent_color',
            field=models.CharField(default='#6C63FF', help_text="Couleur principale utilisée dans l'interface. Format hexadécimal (#RRGGBB)", max_length=20),
        ),
        migrations.AlterField(
            model_name='userpreference',
            name='dark_mode',
            field=models.BooleanField(default=False, help_text="Active ou désactive le mode sombre pour l'interface"),
        ),
        migrations.AlterField(
            model_name='userpreference',
            name='enable_animations',
            field=models.BooleanField(default=True, help_text="Active ou désactive les animations dans l'application"),
        ),
        migrations.AlterField(
            model_name='userpreference',
            name='font_choice',
            field=models.CharField(default='Roboto', help_text="Police de caractères préférée pour l'interface", max_length=50),
        ),
        migrations.AlterField(
            model_name='userpreference',
            name='notif_badge',
            field=models.BooleanField(default=True, help_text='Active ou désactive les notifications pour les badges débloqués'),
        ),
        migrations.AlterField(
            model_name='userpreference',
            name='notif_info',
            field=models.BooleanField(default=True, help_text='Active ou désactive les notifications informatives générales'),
        ),
        migrations.AlterField(
            model_name='userpreference',
            name='notif_objectif',
            field=models.BooleanField(default=True, help_text='Active ou désactive les notifications liées aux objectifs'),
        ),
        migrations.AlterField(
            model_name='userpreference',
            name='notif_statistique',
            field=models.BooleanField(default=True, help_text='Active ou désactive les notifications de statistiques'),
        ),
        migrations.AlterField(
            model_name='userpreference',
            name='user',
            field=models.OneToOneField(help_text='Utilisateur auquel ces préférences appartiennent', on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='weeklystat',
            name='categories',
            field=models.JSONField(blank=True, default=dict, help_text='Répartition des entrées par catégorie'),
        ),
        migrations.AlterField(
            model_name='weeklystat',
            name='entries_count',
            field=models.PositiveIntegerField(help_text="Nombre total d'entrées pour la semaine"),
        ),
        migrations.AlterField(
            model_name='weeklystat',
            name='mood_average',
            field=models.FloatField(blank=True, help_text='Moyenne des humeurs de la semaine', null=True),
        ),
        migrations.AlterField(
            model_name='weeklystat',
            name='week_start',
            field=models.DateField(help_text='Premier jour de la semaine (lundi)'),
        ),
        migrations.AddIndex(
            model_name='weeklystat',
            index=models.Index(fields=['user', 'week_start'], name='Myevol_app__user_id_62c5c9_idx'),
        ),
        migrations.AddIndex(
            model_name='weeklystat',
            index=models.Index(fields=['mood_average'], name='Myevol_app__mood_av_031597_idx'),
        ),
        migrations.AddField(
            model_name='monthlystat',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monthly_stats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='annualstat',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annual_stats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='monthlystat',
            unique_together={('user', 'month_start')},
        ),
        migrations.AlterUniqueTogether(
            name='annualstat',
            unique_together={('user', 'year_start')},
        ),
    ]
