# Generated by Django 4.2.20 on 2025-04-28 19:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BadgeTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Nom unique du badge (ex: 'Régulier', 'Niveau 3')", max_length=100, unique=True)),
                ('description', models.TextField(help_text='Description du badge visible dans l’interface')),
                ('icon', models.CharField(help_text='Emoji ou identifiant visuel de l’icône', max_length=100)),
                ('condition', models.CharField(help_text='Condition textuelle d’obtention du badge', max_length=255)),
                ('level', models.PositiveIntegerField(blank=True, help_text="Niveau cible (optionnel, utile pour les badges de type 'Niveau X')", null=True)),
                ('animation_url', models.URLField(blank=True, help_text='URL d’une animation Lottie ou GIF', null=True)),
                ('color_theme', models.CharField(default='#FFD700', help_text='Couleur HEX du thème visuel du badge', max_length=20)),
            ],
            options={
                'verbose_name': 'Modèle de badge',
                'verbose_name_plural': 'Modèles de badges',
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Titre du défi affiché à l'utilisateur", max_length=255)),
                ('description', models.TextField(help_text='Description du défi et règles à suivre')),
                ('start_date', models.DateField(help_text='Date de début du défi')),
                ('end_date', models.DateField(help_text='Date de fin du défi')),
                ('target_entries', models.PositiveIntegerField(default=5, help_text="Nombre d'entrées à réaliser pour réussir le défi")),
            ],
            options={
                'verbose_name': 'Défi',
                'verbose_name_plural': 'Défis',
                'ordering': ['-end_date'],
            },
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Le contenu de l’entrée de journal', verbose_name="Qu'avez-vous accompli aujourd'hui ?")),
                ('mood', models.IntegerField(choices=[(1, '1/10'), (2, '2/10'), (3, '3/10'), (4, '4/10'), (5, '5/10'), (6, '6/10'), (7, '7/10'), (8, '8/10'), (9, '9/10'), (10, '10/10')], help_text="La note d'humeur (de 1 à 10) associée à cette entrée", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name="Note d'humeur")),
                ('category', models.CharField(help_text="La catégorie de l'entrée (ex : Travail, Santé)", max_length=100, verbose_name='Catégorie')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Date et heure de création de l’entrée')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date et heure de la dernière mise à jour')),
            ],
            options={
                'verbose_name': 'Entrée de journal',
                'verbose_name_plural': 'Entrées de journal',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text="Adresse e-mail de l'utilisateur.", max_length=254, unique=True)),
                ('longest_streak', models.PositiveIntegerField(default=0, editable=False, help_text='Plus longue série de jours consécutifs.')),
                ('avatar_url', models.URLField(blank=True, help_text="URL de l'avatar de l'utilisateur.", null=True)),
                ('xp', models.PositiveIntegerField(default=0, help_text="Points d'expérience accumulés.")),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notif_badge', models.BooleanField(default=True, help_text='Active ou désactive les notifications pour les badges débloqués')),
                ('notif_objectif', models.BooleanField(default=True, help_text='Active ou désactive les notifications liées aux objectifs')),
                ('notif_info', models.BooleanField(default=True, help_text='Active ou désactive les notifications informatives générales')),
                ('notif_statistique', models.BooleanField(default=True, help_text='Active ou désactive les notifications de statistiques')),
                ('dark_mode', models.BooleanField(default=False, help_text="Active ou désactive le mode sombre pour l'interface")),
                ('accent_color', models.CharField(default='#6C63FF', help_text="Couleur principale utilisée dans l'interface. Format hexadécimal (#RRGGBB)", max_length=20)),
                ('font_choice', models.CharField(default='Roboto', help_text="Police de caractères préférée pour l'interface", max_length=50)),
                ('enable_animations', models.BooleanField(default=True, help_text="Active ou désactive les animations dans l'application")),
                ('user', models.OneToOneField(help_text='Utilisateur auquel ces préférences appartiennent', on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Préférence utilisateur',
                'verbose_name_plural': 'Préférences utilisateur',
                'ordering': ['user'],
            },
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Le texte de la citation.')),
                ('author', models.CharField(blank=True, help_text="L'auteur de la citation.", max_length=255)),
                ('mood_tag', models.CharField(blank=True, help_text="Étiquette d'humeur associée (ex: 'positive', 'low', 'neutral')", max_length=50)),
            ],
            options={
                'verbose_name': 'Citation',
                'verbose_name_plural': 'Citations',
                'ordering': ['author'],
                'indexes': [models.Index(fields=['mood_tag'], name='Myevol_app__mood_ta_ef3048_idx'), models.Index(fields=['author'], name='Myevol_app__author_3a2bb3_idx')],
            },
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Titre de l'objectif.", max_length=255)),
                ('category', models.CharField(help_text="Catégorie de l'objectif.", max_length=100)),
                ('done', models.BooleanField(default=False, help_text="Indique si l'objectif est atteint.")),
                ('target_date', models.DateField(help_text="Date cible pour atteindre l'objectif.")),
                ('target_value', models.PositiveIntegerField(default=1, help_text="Nombre d'actions nécessaires pour accomplir l'objectif.", validators=[django.core.validators.MinValueValidator(1)], verbose_name='Objectif à atteindre')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text="Date de création de l'objectif.")),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='objectives', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Objectif',
                'verbose_name_plural': 'Objectifs',
                'ordering': ['target_date', 'done'],
            },
        ),
        migrations.CreateModel(
            name='JournalMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Fichier multimédia (image, audio, etc.)', upload_to='journal_media/')),
                ('type', models.CharField(choices=[('image', 'Image'), ('audio', 'Audio')], help_text='Type de fichier multimédia (image ou audio)', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date de création du média')),
                ('entry', models.ForeignKey(help_text='Entrée de journal à laquelle ce média est associé', on_delete=django.db.models.deletion.CASCADE, related_name='media', to='Myevol_app.journalentry')),
            ],
            options={
                'verbose_name': 'Média',
                'verbose_name_plural': 'Médias',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='journalentry',
            name='user',
            field=models.ForeignKey(help_text='Utilisateur concerné par l’entrée', on_delete=django.db.models.deletion.CASCADE, related_name='entries', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(help_text="Type d'action enregistrée (ex : 'connexion', 'attribution_badge')", max_length=255)),
                ('description', models.TextField(blank=True, help_text="Détail ou message libre sur l'événement")),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Horodatage de l’événement (généré automatiquement)')),
                ('metadata', models.JSONField(blank=True, help_text='Données additionnelles liées à l’événement (ex : id d’un badge, durée, etc.)', null=True)),
                ('severity', models.CharField(choices=[('INFO', 'Information'), ('WARN', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], default='INFO', help_text="Niveau de gravité de l'événement", max_length=10)),
                ('user', models.ForeignKey(blank=True, help_text='Utilisateur concerné par l’événement (optionnel pour les logs système)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Événement',
                'verbose_name_plural': 'Événements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DailyStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='La date des statistiques')),
                ('entries_count', models.PositiveIntegerField(default=0, help_text="Nombre total d'entrées pour la journée")),
                ('mood_average', models.FloatField(blank=True, help_text='Moyenne des humeurs de la journée', null=True)),
                ('categories', models.JSONField(blank=True, default=dict, help_text='Répartition des entrées par catégorie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Statistique journalière',
                'verbose_name_plural': 'Statistiques journalières',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False, help_text='Statut de complétion du défi')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Date de complétion', null=True)),
                ('challenge', models.ForeignKey(help_text='Défi concerné', on_delete=django.db.models.deletion.CASCADE, related_name='progresses', to='Myevol_app.challenge')),
                ('user', models.ForeignKey(help_text='Utilisateur lié à ce défi', on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Progression de défi',
                'verbose_name_plural': 'Progressions de défi',
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nom du badge affiché à l’utilisateur', max_length=100)),
                ('description', models.TextField(help_text='Texte explicatif du badge (accomplissement)')),
                ('icon', models.CharField(help_text='Emoji ou nom d’icône visuelle pour le badge', max_length=100)),
                ('date_obtenue', models.DateField(auto_now_add=True, db_index=True, help_text='Date à laquelle le badge a été obtenu')),
                ('level', models.PositiveIntegerField(blank=True, help_text='Niveau associé au badge (optionnel)', null=True)),
                ('user', models.ForeignKey(help_text='Utilisateur à qui ce badge a été attribué', on_delete=django.db.models.deletion.CASCADE, related_name='badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Badge',
                'verbose_name_plural': 'Badges',
                'ordering': ['-date_obtenue'],
            },
        ),
        migrations.CreateModel(
            name='AnnualStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_start', models.DateField(help_text="Premier jour de l'année")),
                ('entries_count', models.PositiveIntegerField(help_text="Nombre total d'entrées pour l'année")),
                ('mood_average', models.FloatField(blank=True, help_text="Moyenne des humeurs de l'année", null=True)),
                ('categories', models.JSONField(blank=True, default=dict, help_text='Répartition des entrées par catégorie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annual_stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Statistique annuelle',
                'verbose_name_plural': 'Statistiques annuelles',
                'ordering': ['-year_start'],
            },
        ),
        migrations.CreateModel(
            name='WeeklyStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_start', models.DateField(help_text='Premier jour de la semaine (lundi)')),
                ('entries_count', models.PositiveIntegerField(help_text="Nombre total d'entrées pour la semaine")),
                ('mood_average', models.FloatField(blank=True, help_text='Moyenne des humeurs de la semaine', null=True)),
                ('categories', models.JSONField(blank=True, default=dict, help_text='Répartition des entrées par catégorie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weekly_stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Statistique hebdomadaire',
                'verbose_name_plural': 'Statistiques hebdomadaires',
                'ordering': ['-week_start'],
                'indexes': [models.Index(fields=['user', 'week_start'], name='Myevol_app__user_id_62c5c9_idx'), models.Index(fields=['mood_average'], name='Myevol_app__mood_av_031597_idx')],
                'unique_together': {('user', 'week_start')},
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(help_text="Contenu textuel de la notification à afficher à l'utilisateur")),
                ('notif_type', models.CharField(choices=[('badge', 'Badge débloqué'), ('objectif', 'Objectif atteint'), ('statistique', 'Mise à jour statistique'), ('info', 'Information générale')], default='info', help_text='Type de la notification (ex : badge, statistique, info)', max_length=20)),
                ('is_read', models.BooleanField(default=False, help_text='Indique si la notification a été lue')),
                ('read_at', models.DateTimeField(blank=True, help_text='Date à laquelle la notification a été lue', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date de création de la notification')),
                ('archived', models.BooleanField(default=False, help_text='Indique si la notification a été archivée')),
                ('scheduled_at', models.DateTimeField(blank=True, help_text='Date programmée pour afficher la notification', null=True)),
                ('temporary_field', models.BooleanField(default=False)),
                ('user', models.ForeignKey(help_text='Utilisateur concerné par la notification', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'is_read', 'archived'], name='Myevol_app__user_id_d27d4b_idx')],
            },
        ),
        migrations.CreateModel(
            name='MonthlyStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month_start', models.DateField(help_text='Premier jour du mois')),
                ('entries_count', models.PositiveIntegerField(help_text="Nombre total d'entrées pour le mois")),
                ('mood_average', models.FloatField(blank=True, help_text='Moyenne des humeurs du mois', null=True)),
                ('categories', models.JSONField(blank=True, default=dict, help_text='Répartition des entrées par catégorie')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monthly_stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Statistique mensuelle',
                'verbose_name_plural': 'Statistiques mensuelles',
                'ordering': ['-month_start'],
                'unique_together': {('user', 'month_start')},
            },
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['user', 'created_at'], name='Myevol_app__user_id_621c24_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['category'], name='Myevol_app__categor_09ed04_idx'),
        ),
        migrations.AddIndex(
            model_name='eventlog',
            index=models.Index(fields=['user', 'action'], name='Myevol_app__user_id_e0f943_idx'),
        ),
        migrations.AddIndex(
            model_name='eventlog',
            index=models.Index(fields=['created_at'], name='Myevol_app__created_20eb22_idx'),
        ),
        migrations.AddIndex(
            model_name='dailystat',
            index=models.Index(fields=['user', 'date'], name='Myevol_app__user_id_0b0832_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dailystat',
            unique_together={('user', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='challengeprogress',
            unique_together={('user', 'challenge')},
        ),
        migrations.AlterUniqueTogether(
            name='badge',
            unique_together={('name', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='annualstat',
            unique_together={('user', 'year_start')},
        ),
    ]
